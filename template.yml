# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

---
AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: GitHub Actions AWS SAM POC

Parameters:
  GitHubOrg:
    Type: String
    Description: GitHub Organization
  GitHubRepo:
    Type: String
    Description: GitHub Repository
  GitSHA:
    Type: String
    Description: Git SHA

Globals:
  Function:
    Architectures:
      - arm64
    Environment:
      Variables:
        LOG_LEVEL: info
    Handler: lambda_handler.handler
    Layers:
      # @see https://docs.powertools.aws.dev/lambda/python/latest/#lambda-layer
      - "{{resolve:ssm:/aws/service/powertools/python/arm64/python3.13/latest}}"
      - !Ref DependencyLayer
    MemorySize: 128 # megabytes
    PropagateTags: true
    Runtime: python3.13
    Tags:
      "github:org": !Ref GitHubOrg
      "github:repo": !Ref GitHubRepo
      "git:sha": !Ref GitSHA
    Timeout: 5 # seconds
    Tracing: Active

Resources:
  DependencyLayer:
    Type: "AWS::Serverless::LayerVersion"
    Metadata:
      BuildMethod: python3.13
      BuildArchitecture: arm64
    Properties:
      LicenseInfo: MIT-0
      CompatibleArchitectures:
        - arm64
      CompatibleRuntimes:
        - python3.13
      ContentUri: src/dependencies
      Description: !Sub "${AWS::StackName} - Dependency Layer"
      RetentionPolicy: Delete

  FunctionLogGroup:
    Type: "AWS::Logs::LogGroup"
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: "Ignoring KMS key"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Function}"
      RetentionInDays: 3

  FunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub "lambda.${AWS::URLSuffix}"
          Action: "sts:AssumeRole"
      Description: !Sub "DO NOT DELETE - Used by Lambda. Created by CloudFormation ${AWS::StackId}"
      Path: "/app/"
      PermissionsBoundary: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/gha-aws-sam-poc-setup-PermissionsBoundary"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSXRayDaemonWriteAccess"
      Tags:
        - Key: "aws-cloudformation:stack-name"
          Value: !Ref "AWS::StackName"
        - Key: "aws-cloudformation:stack-id"
          Value: !Ref "AWS::StackId"
        - Key: "aws-cloudformation:logical-id"
          Value: FunctionRole
        - Key: "github:org"
          Value: !Ref GitHubOrg
        - Key: "github:repo"
          Value: !Ref GitHubRepo
        - Key: "git:sha"
          Value: !Ref GitSHA

  CloudWatchLogsPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: CloudWatchLogs
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: !GetAtt FunctionLogGroup.Arn
      Roles:
        - !Ref FunctionRole

  Function:
    Type: "AWS::Serverless::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: "Ignoring CloudWatch"
          - id: W89
            reason: "Ignoring VPC"
          - id: W92
            reason: "Ignoring Reserved Concurrency"
    Properties:
      CodeUri: src/sample
      Description: !Sub "${AWS::StackName} Demo Function"
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: demo
          POWERTOOLS_METRICS_NAMESPACE: GitHubActionsPOC
      Role: !GetAtt FunctionRole.Arn
